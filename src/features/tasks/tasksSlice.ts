import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import tasksService from "../../services/taskService";
import { InitialStateModel, Task, FilterData } from "../../utils/models";


const initialState : InitialStateModel = {
  tasks: [],
  task: new Task(),
  loading: false,
  error: false,
  dataChanged: false,
  message: ""
};

/**
 * Thunk to get tasks list in redux
 * @param {FilterData} _filData - object of filter data : {status}
 */
export const getTasksList = createAsyncThunk("getTasks", async (_filData: FilterData = new FilterData()) => {
   
  //call getTasks service method
  const res = await tasksService.getTasks(_filData);
  return res;
});

/**
 * Thunk to create task in redux
 * @param {Task} _inputData - object of Task data
 */
export const createTask = createAsyncThunk("createTask", async (_inputData: Task = new Task()) => {
   
  //call getTasks service method
  const res = await tasksService.createTask(_inputData);
  return res;
});

/**
 * Thunk to update task in redux
 * @param {Task} _inputData - object of Task data
 */
export const updateTask = createAsyncThunk("updateTask", async (_inputData: Task = new Task()) => {
   
  //call getTasks service method
  const res = await tasksService.updateTask(_inputData);
  return res;
});

/**
 * Thunk to update task status in redux
 * @param {Task} _inputData - object of Task data
 */
export const updateTaskStatus = createAsyncThunk("updateTaskStatus", async (_inputData: Task = new Task()) => {
   
  //call getTasks service method
  const res = await tasksService.updateTaskStatus(_inputData);
  return res;
});

/**
 * Thunk to update task in redux
 * @param {number} id - id
 */
export const deleteTask = createAsyncThunk("deleteTask", async (id: number) => {
   
  //call getTasks service method
  const res = await tasksService.deleteTask(id);
  return res;
});

/**
 * Redux Slice using Redux Toolkit - Toolkit make it easy :) 
 * there are three state which are pending, fulfilled, rejected
 * @fulfilled {number} - returned list of tasks
 * @rejected {string} - set error
 * @pending {string} - set loader
 * @returns member 
 */
const tasksSlice = createSlice({
  name: "tasksSlice",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
  extraReducers: builder => {
    builder.addCase(getTasksList.pending, (state, action) => {
      state.loading = true; 
      state.dataChanged = false;
    });
    builder.addCase(getTasksList.fulfilled, (state, action) => {
      
      state.loading = false;
      state.tasks = action.payload.data; 
      state.dataChanged = false;
    });
    builder.addCase(getTasksList.rejected, (state, action) => {
      state.error = true; 
      state.dataChanged = false;
    });

    builder.addCase(createTask.pending, (state, action) => {
      
      state.loading = true;
      state.dataChanged = false;
    });
    builder.addCase(createTask.fulfilled, (state, action) => {
      
      state.loading = false; 
      state.dataChanged = true;
    });
    builder.addCase(createTask.rejected, (state, action) => {
      
      state.error = true;
      state.dataChanged = false;
    });

    builder.addCase(updateTask.pending, (state, action) => {
      
      state.loading = true;
      state.dataChanged = false;
    });
    builder.addCase(updateTask.fulfilled, (state, action) => {
      
      state.loading = false; 
      state.dataChanged = true;
    });
    builder.addCase(updateTask.rejected, (state, action) => {
      
      state.error = true;
      state.dataChanged = false;
    });

    builder.addCase(updateTaskStatus.pending, (state, action) => {
      
      state.loading = true;
      state.dataChanged = false;
    });
    builder.addCase(updateTaskStatus.fulfilled, (state, action) => {
      
      state.loading = false; 
      state.dataChanged = true;
    });
    builder.addCase(updateTaskStatus.rejected, (state, action) => {
      
      state.error = true;
      state.dataChanged = false;
    });


    builder.addCase(deleteTask.pending, (state, action) => {
      
      state.loading = true;
      state.dataChanged = false;
    });
    builder.addCase(deleteTask.fulfilled, (state, action) => {
      
      state.loading = false; 
      state.dataChanged = true;
    });
    builder.addCase(deleteTask.rejected, (state, action) => {
      
      state.error = true;
      state.dataChanged = false;
    });
  
  },
});

export const { } =
  tasksSlice.actions;

export default tasksSlice.reducer;
