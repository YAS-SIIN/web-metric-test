import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import tasksService from "../../services/taskService";
import { filData } from "../../utils/models";


const initialState = {
  tasks: [],
  loading: false,
  error: false,
};

/**
 * Thunk to get tasks list in redux
 * @param _filData - object of filter data : {status}
 */
export const getTasksList = createAsyncThunk("getTasks", async (_filData: filData = new filData()) => {
  debugger;
  //call getTasks service method
  const res = await tasksService.getTasks(_filData);
  return res;
});

/**
 * Redux Slice using Redux Toolkit - Toolkit make it easy :) 
 * there are three state which are pending, fulfilled, rejected
 * @fulfilled {number} - returned list of tasks
 * @rejected {string} - set error
 * @pending {string} - set loader
 * @returns member 
 */
const tasksSlice = createSlice({
  name: "tasksList",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    // waiting for get data
    builder.addCase(getTasksList.pending, (state, action) => {
      state.loading = true;
    });
    builder.addCase(getTasksList.fulfilled, (state, action) => {
      state.loading = false;
      state.tasks = action.payload;
    });
    // some error occurred while loading repository content
    builder.addCase(getTasksList.rejected, (state, action) => {
      state.error = true;
    });
  },
});

export const { } =
  tasksSlice.actions;

export default tasksSlice.reducer;
